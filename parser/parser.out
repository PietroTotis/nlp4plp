Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement program
Rule 3     statement -> group
Rule 4     statement -> take
Rule 5     statement -> take_wr
Rule 6     statement -> size
Rule 7     statement -> given
Rule 8     statement -> union
Rule 9     statement -> observe
Rule 10    statement -> probability
Rule 11    statement -> property
Rule 12    term -> num
Rule 13    term -> LABEL
Rule 14    term -> LABEL LPAR t_list RPAR
Rule 15    num -> INT
Rule 16    num -> FLOAT
Rule 17    t_list -> term
Rule 18    t_list -> term COMMA t_list
Rule 19    group -> GROUP LPAR LABEL RPAR STOP
Rule 20    group -> GROUP LPAR rest RPAR STOP
Rule 21    size -> SIZE LPAR LABEL COMMA INT RPAR STOP
Rule 22    rest -> REST LPAR LABEL RPAR
Rule 23    take -> TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP
Rule 24    take -> TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP
Rule 25    take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP
Rule 26    take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP
Rule 27    given -> GIVEN LPAR how_many RPAR STOP
Rule 28    property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP
Rule 29    proposition -> term
Rule 30    proposition -> AND LPAR logic COMMA logic RPAR
Rule 31    proposition -> OR LPAR logic COMMA logic RPAR
Rule 32    proposition -> NOT LPAR logic RPAR
Rule 33    proposition -> aggcmp
Rule 34    proposition -> ALLSAME LPAR LABEL COMMA term RPAR
Rule 35    proposition -> ALLDIFF LPAR LABEL COMMA term RPAR
Rule 36    how_many -> ALL LPAR LABEL COMMA proposition RPAR
Rule 37    how_many -> NONE LPAR LABEL COMMA proposition RPAR
Rule 38    how_many -> SOME LPAR LABEL COMMA proposition RPAR
Rule 39    how_many -> NTH LPAR INT COMMA LABEL COMMA proposition RPAR
Rule 40    how_many -> ATLEAST LPAR INT COMMA LABEL COMMA proposition RPAR
Rule 41    how_many -> ATMOST LPAR INT COMMA LABEL COMMA proposition RPAR
Rule 42    how_many -> exactly
Rule 43    logic -> proposition
Rule 44    logic -> how_many
Rule 45    op -> SUM
Rule 46    op -> MUL
Rule 47    op -> MIN
Rule 48    op -> MAX
Rule 49    op -> AVERAGE
Rule 50    comp -> EQUALS SEMI EQUALS
Rule 51    comp -> LT
Rule 52    comp -> GT
Rule 53    comp -> GT EQUALS
Rule 54    comp -> EQUALS LT
Rule 55    comp -> EQUALS SLASH EQUALS
Rule 56    rel -> REL LPAR num DIVIDE num COMMA t_list RPAR
Rule 57    rel -> REL LPAR FLOAT COMMA t_list RPAR
Rule 58    short -> EVEN
Rule 59    short -> ODD
Rule 60    short -> PRIME
Rule 61    exactly -> EXACTLY LPAR rel COMMA LABEL COMMA proposition RPAR
Rule 62    exactly -> EXACTLY LPAR INT COMMA LABEL COMMA proposition RPAR
Rule 63    union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP
Rule 64    aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
Rule 65    aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
Rule 66    probability -> PROBABILITY LPAR logic RPAR STOP
Rule 67    observe -> OBSERVE LPAR logic RPAR STOP

Terminals, with rules where they appear

AGGCMP               : 64 65
ALL                  : 36
ALLDIFF              : 35
ALLSAME              : 34
AND                  : 30
ATLEAST              : 40
ATMOST               : 41
AVERAGE              : 49
COMMA                : 18 21 23 23 24 24 25 25 26 26 28 30 31 34 35 36 37 38 39 39 40 40 41 41 56 57 61 61 62 62 63 64 64 64 64 65 65 65
DIVIDE               : 56
EQUALS               : 50 50 53 54 55 55
EVEN                 : 58
EXACTLY              : 61 62
FLOAT                : 16 57
GIVEN                : 27
GROUP                : 19 20
GT                   : 52 53
INT                  : 15 21 23 24 25 26 39 40 41 62 64
LABEL                : 13 14 19 21 22 23 23 24 25 25 26 34 35 36 37 38 39 40 41 61 62 63 64 65
LPAR                 : 14 19 20 21 22 23 24 25 26 27 28 30 31 32 34 35 36 37 38 39 40 41 56 57 61 62 63 64 65 66 67
LSPAR                : 28 63
LT                   : 51 54
MAX                  : 48
MIN                  : 47
MUL                  : 46
NONE                 : 37
NOT                  : 32
NTH                  : 39
OBSERVE              : 67
ODD                  : 59
OR                   : 31
PRIME                : 60
PROBABILITY          : 66
PROPERTY             : 28
REL                  : 56 57
REST                 : 22
RPAR                 : 14 19 20 21 22 23 24 25 26 27 28 30 31 32 34 35 36 37 38 39 40 41 56 57 61 62 63 64 65 66 67
RSPAR                : 28 63
SEMI                 : 50
SIZE                 : 21
SLASH                : 55
SOME                 : 38
STOP                 : 19 20 21 23 24 25 26 27 28 63 66 67
SUM                  : 45
TAKE                 : 23 24
TAKE_WR              : 25 26
UNION                : 63
error                : 

Nonterminals, with rules where they appear

aggcmp               : 33
comp                 : 64
exactly              : 42
given                : 7
group                : 3
how_many             : 27 44
logic                : 30 30 31 31 32 66 67
num                  : 12 56 56
observe              : 9
op                   : 64 65
probability          : 10
program              : 2 0
property             : 11
proposition          : 36 37 38 39 40 41 43 61 62
rel                  : 61
rest                 : 20 24 26
short                : 65
size                 : 6
statement            : 1 2
t_list               : 14 18 28 56 57 63
take                 : 4
take_wr              : 5
term                 : 17 18 28 29 34 35 64 65
union                : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . group
    (4) statement -> . take
    (5) statement -> . take_wr
    (6) statement -> . size
    (7) statement -> . given
    (8) statement -> . union
    (9) statement -> . observe
    (10) statement -> . probability
    (11) statement -> . property
    (19) group -> . GROUP LPAR LABEL RPAR STOP
    (20) group -> . GROUP LPAR rest RPAR STOP
    (23) take -> . TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP
    (24) take -> . TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP
    (25) take_wr -> . TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP
    (26) take_wr -> . TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP
    (21) size -> . SIZE LPAR LABEL COMMA INT RPAR STOP
    (27) given -> . GIVEN LPAR how_many RPAR STOP
    (63) union -> . UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP
    (67) observe -> . OBSERVE LPAR logic RPAR STOP
    (66) probability -> . PROBABILITY LPAR logic RPAR STOP
    (28) property -> . PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP

    GROUP           shift and go to state 12
    TAKE            shift and go to state 13
    TAKE_WR         shift and go to state 14
    SIZE            shift and go to state 15
    GIVEN           shift and go to state 16
    UNION           shift and go to state 17
    OBSERVE         shift and go to state 18
    PROBABILITY     shift and go to state 19
    PROPERTY        shift and go to state 20

    program                        shift and go to state 1
    statement                      shift and go to state 2
    group                          shift and go to state 3
    take                           shift and go to state 4
    take_wr                        shift and go to state 5
    size                           shift and go to state 6
    given                          shift and go to state 7
    union                          shift and go to state 8
    observe                        shift and go to state 9
    probability                    shift and go to state 10
    property                       shift and go to state 11

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .
    (2) program -> statement . program
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . group
    (4) statement -> . take
    (5) statement -> . take_wr
    (6) statement -> . size
    (7) statement -> . given
    (8) statement -> . union
    (9) statement -> . observe
    (10) statement -> . probability
    (11) statement -> . property
    (19) group -> . GROUP LPAR LABEL RPAR STOP
    (20) group -> . GROUP LPAR rest RPAR STOP
    (23) take -> . TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP
    (24) take -> . TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP
    (25) take_wr -> . TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP
    (26) take_wr -> . TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP
    (21) size -> . SIZE LPAR LABEL COMMA INT RPAR STOP
    (27) given -> . GIVEN LPAR how_many RPAR STOP
    (63) union -> . UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP
    (67) observe -> . OBSERVE LPAR logic RPAR STOP
    (66) probability -> . PROBABILITY LPAR logic RPAR STOP
    (28) property -> . PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP

    $end            reduce using rule 1 (program -> statement .)
    GROUP           shift and go to state 12
    TAKE            shift and go to state 13
    TAKE_WR         shift and go to state 14
    SIZE            shift and go to state 15
    GIVEN           shift and go to state 16
    UNION           shift and go to state 17
    OBSERVE         shift and go to state 18
    PROBABILITY     shift and go to state 19
    PROPERTY        shift and go to state 20

    statement                      shift and go to state 2
    program                        shift and go to state 21
    group                          shift and go to state 3
    take                           shift and go to state 4
    take_wr                        shift and go to state 5
    size                           shift and go to state 6
    given                          shift and go to state 7
    union                          shift and go to state 8
    observe                        shift and go to state 9
    probability                    shift and go to state 10
    property                       shift and go to state 11

state 3

    (3) statement -> group .

    GROUP           reduce using rule 3 (statement -> group .)
    TAKE            reduce using rule 3 (statement -> group .)
    TAKE_WR         reduce using rule 3 (statement -> group .)
    SIZE            reduce using rule 3 (statement -> group .)
    GIVEN           reduce using rule 3 (statement -> group .)
    UNION           reduce using rule 3 (statement -> group .)
    OBSERVE         reduce using rule 3 (statement -> group .)
    PROBABILITY     reduce using rule 3 (statement -> group .)
    PROPERTY        reduce using rule 3 (statement -> group .)
    $end            reduce using rule 3 (statement -> group .)


state 4

    (4) statement -> take .

    GROUP           reduce using rule 4 (statement -> take .)
    TAKE            reduce using rule 4 (statement -> take .)
    TAKE_WR         reduce using rule 4 (statement -> take .)
    SIZE            reduce using rule 4 (statement -> take .)
    GIVEN           reduce using rule 4 (statement -> take .)
    UNION           reduce using rule 4 (statement -> take .)
    OBSERVE         reduce using rule 4 (statement -> take .)
    PROBABILITY     reduce using rule 4 (statement -> take .)
    PROPERTY        reduce using rule 4 (statement -> take .)
    $end            reduce using rule 4 (statement -> take .)


state 5

    (5) statement -> take_wr .

    GROUP           reduce using rule 5 (statement -> take_wr .)
    TAKE            reduce using rule 5 (statement -> take_wr .)
    TAKE_WR         reduce using rule 5 (statement -> take_wr .)
    SIZE            reduce using rule 5 (statement -> take_wr .)
    GIVEN           reduce using rule 5 (statement -> take_wr .)
    UNION           reduce using rule 5 (statement -> take_wr .)
    OBSERVE         reduce using rule 5 (statement -> take_wr .)
    PROBABILITY     reduce using rule 5 (statement -> take_wr .)
    PROPERTY        reduce using rule 5 (statement -> take_wr .)
    $end            reduce using rule 5 (statement -> take_wr .)


state 6

    (6) statement -> size .

    GROUP           reduce using rule 6 (statement -> size .)
    TAKE            reduce using rule 6 (statement -> size .)
    TAKE_WR         reduce using rule 6 (statement -> size .)
    SIZE            reduce using rule 6 (statement -> size .)
    GIVEN           reduce using rule 6 (statement -> size .)
    UNION           reduce using rule 6 (statement -> size .)
    OBSERVE         reduce using rule 6 (statement -> size .)
    PROBABILITY     reduce using rule 6 (statement -> size .)
    PROPERTY        reduce using rule 6 (statement -> size .)
    $end            reduce using rule 6 (statement -> size .)


state 7

    (7) statement -> given .

    GROUP           reduce using rule 7 (statement -> given .)
    TAKE            reduce using rule 7 (statement -> given .)
    TAKE_WR         reduce using rule 7 (statement -> given .)
    SIZE            reduce using rule 7 (statement -> given .)
    GIVEN           reduce using rule 7 (statement -> given .)
    UNION           reduce using rule 7 (statement -> given .)
    OBSERVE         reduce using rule 7 (statement -> given .)
    PROBABILITY     reduce using rule 7 (statement -> given .)
    PROPERTY        reduce using rule 7 (statement -> given .)
    $end            reduce using rule 7 (statement -> given .)


state 8

    (8) statement -> union .

    GROUP           reduce using rule 8 (statement -> union .)
    TAKE            reduce using rule 8 (statement -> union .)
    TAKE_WR         reduce using rule 8 (statement -> union .)
    SIZE            reduce using rule 8 (statement -> union .)
    GIVEN           reduce using rule 8 (statement -> union .)
    UNION           reduce using rule 8 (statement -> union .)
    OBSERVE         reduce using rule 8 (statement -> union .)
    PROBABILITY     reduce using rule 8 (statement -> union .)
    PROPERTY        reduce using rule 8 (statement -> union .)
    $end            reduce using rule 8 (statement -> union .)


state 9

    (9) statement -> observe .

    GROUP           reduce using rule 9 (statement -> observe .)
    TAKE            reduce using rule 9 (statement -> observe .)
    TAKE_WR         reduce using rule 9 (statement -> observe .)
    SIZE            reduce using rule 9 (statement -> observe .)
    GIVEN           reduce using rule 9 (statement -> observe .)
    UNION           reduce using rule 9 (statement -> observe .)
    OBSERVE         reduce using rule 9 (statement -> observe .)
    PROBABILITY     reduce using rule 9 (statement -> observe .)
    PROPERTY        reduce using rule 9 (statement -> observe .)
    $end            reduce using rule 9 (statement -> observe .)


state 10

    (10) statement -> probability .

    GROUP           reduce using rule 10 (statement -> probability .)
    TAKE            reduce using rule 10 (statement -> probability .)
    TAKE_WR         reduce using rule 10 (statement -> probability .)
    SIZE            reduce using rule 10 (statement -> probability .)
    GIVEN           reduce using rule 10 (statement -> probability .)
    UNION           reduce using rule 10 (statement -> probability .)
    OBSERVE         reduce using rule 10 (statement -> probability .)
    PROBABILITY     reduce using rule 10 (statement -> probability .)
    PROPERTY        reduce using rule 10 (statement -> probability .)
    $end            reduce using rule 10 (statement -> probability .)


state 11

    (11) statement -> property .

    GROUP           reduce using rule 11 (statement -> property .)
    TAKE            reduce using rule 11 (statement -> property .)
    TAKE_WR         reduce using rule 11 (statement -> property .)
    SIZE            reduce using rule 11 (statement -> property .)
    GIVEN           reduce using rule 11 (statement -> property .)
    UNION           reduce using rule 11 (statement -> property .)
    OBSERVE         reduce using rule 11 (statement -> property .)
    PROBABILITY     reduce using rule 11 (statement -> property .)
    PROPERTY        reduce using rule 11 (statement -> property .)
    $end            reduce using rule 11 (statement -> property .)


state 12

    (19) group -> GROUP . LPAR LABEL RPAR STOP
    (20) group -> GROUP . LPAR rest RPAR STOP

    LPAR            shift and go to state 22


state 13

    (23) take -> TAKE . LPAR LABEL COMMA LABEL COMMA INT RPAR STOP
    (24) take -> TAKE . LPAR rest COMMA LABEL COMMA INT RPAR STOP

    LPAR            shift and go to state 23


state 14

    (25) take_wr -> TAKE_WR . LPAR LABEL COMMA LABEL COMMA INT RPAR STOP
    (26) take_wr -> TAKE_WR . LPAR rest COMMA LABEL COMMA INT RPAR STOP

    LPAR            shift and go to state 24


state 15

    (21) size -> SIZE . LPAR LABEL COMMA INT RPAR STOP

    LPAR            shift and go to state 25


state 16

    (27) given -> GIVEN . LPAR how_many RPAR STOP

    LPAR            shift and go to state 26


state 17

    (63) union -> UNION . LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP

    LPAR            shift and go to state 27


state 18

    (67) observe -> OBSERVE . LPAR logic RPAR STOP

    LPAR            shift and go to state 28


state 19

    (66) probability -> PROBABILITY . LPAR logic RPAR STOP

    LPAR            shift and go to state 29


state 20

    (28) property -> PROPERTY . LPAR term COMMA LSPAR t_list RSPAR RPAR STOP

    LPAR            shift and go to state 30


state 21

    (2) program -> statement program .

    $end            reduce using rule 2 (program -> statement program .)


state 22

    (19) group -> GROUP LPAR . LABEL RPAR STOP
    (20) group -> GROUP LPAR . rest RPAR STOP
    (22) rest -> . REST LPAR LABEL RPAR

    LABEL           shift and go to state 31
    REST            shift and go to state 33

    rest                           shift and go to state 32

state 23

    (23) take -> TAKE LPAR . LABEL COMMA LABEL COMMA INT RPAR STOP
    (24) take -> TAKE LPAR . rest COMMA LABEL COMMA INT RPAR STOP
    (22) rest -> . REST LPAR LABEL RPAR

    LABEL           shift and go to state 34
    REST            shift and go to state 33

    rest                           shift and go to state 35

state 24

    (25) take_wr -> TAKE_WR LPAR . LABEL COMMA LABEL COMMA INT RPAR STOP
    (26) take_wr -> TAKE_WR LPAR . rest COMMA LABEL COMMA INT RPAR STOP
    (22) rest -> . REST LPAR LABEL RPAR

    LABEL           shift and go to state 36
    REST            shift and go to state 33

    rest                           shift and go to state 37

state 25

    (21) size -> SIZE LPAR . LABEL COMMA INT RPAR STOP

    LABEL           shift and go to state 38


state 26

    (27) given -> GIVEN LPAR . how_many RPAR STOP
    (36) how_many -> . ALL LPAR LABEL COMMA proposition RPAR
    (37) how_many -> . NONE LPAR LABEL COMMA proposition RPAR
    (38) how_many -> . SOME LPAR LABEL COMMA proposition RPAR
    (39) how_many -> . NTH LPAR INT COMMA LABEL COMMA proposition RPAR
    (40) how_many -> . ATLEAST LPAR INT COMMA LABEL COMMA proposition RPAR
    (41) how_many -> . ATMOST LPAR INT COMMA LABEL COMMA proposition RPAR
    (42) how_many -> . exactly
    (61) exactly -> . EXACTLY LPAR rel COMMA LABEL COMMA proposition RPAR
    (62) exactly -> . EXACTLY LPAR INT COMMA LABEL COMMA proposition RPAR

    ALL             shift and go to state 40
    NONE            shift and go to state 41
    SOME            shift and go to state 42
    NTH             shift and go to state 43
    ATLEAST         shift and go to state 44
    ATMOST          shift and go to state 45
    EXACTLY         shift and go to state 47

    how_many                       shift and go to state 39
    exactly                        shift and go to state 46

state 27

    (63) union -> UNION LPAR . LABEL COMMA LSPAR t_list RSPAR RPAR STOP

    LABEL           shift and go to state 48


state 28

    (67) observe -> OBSERVE LPAR . logic RPAR STOP
    (43) logic -> . proposition
    (44) logic -> . how_many
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (36) how_many -> . ALL LPAR LABEL COMMA proposition RPAR
    (37) how_many -> . NONE LPAR LABEL COMMA proposition RPAR
    (38) how_many -> . SOME LPAR LABEL COMMA proposition RPAR
    (39) how_many -> . NTH LPAR INT COMMA LABEL COMMA proposition RPAR
    (40) how_many -> . ATLEAST LPAR INT COMMA LABEL COMMA proposition RPAR
    (41) how_many -> . ATMOST LPAR INT COMMA LABEL COMMA proposition RPAR
    (42) how_many -> . exactly
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (61) exactly -> . EXACTLY LPAR rel COMMA LABEL COMMA proposition RPAR
    (62) exactly -> . EXACTLY LPAR INT COMMA LABEL COMMA proposition RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    ALL             shift and go to state 40
    NONE            shift and go to state 41
    SOME            shift and go to state 42
    NTH             shift and go to state 43
    ATLEAST         shift and go to state 44
    ATMOST          shift and go to state 45
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    EXACTLY         shift and go to state 47
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    logic                          shift and go to state 49
    proposition                    shift and go to state 50
    how_many                       shift and go to state 51
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    exactly                        shift and go to state 46
    num                            shift and go to state 61

state 29

    (66) probability -> PROBABILITY LPAR . logic RPAR STOP
    (43) logic -> . proposition
    (44) logic -> . how_many
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (36) how_many -> . ALL LPAR LABEL COMMA proposition RPAR
    (37) how_many -> . NONE LPAR LABEL COMMA proposition RPAR
    (38) how_many -> . SOME LPAR LABEL COMMA proposition RPAR
    (39) how_many -> . NTH LPAR INT COMMA LABEL COMMA proposition RPAR
    (40) how_many -> . ATLEAST LPAR INT COMMA LABEL COMMA proposition RPAR
    (41) how_many -> . ATMOST LPAR INT COMMA LABEL COMMA proposition RPAR
    (42) how_many -> . exactly
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (61) exactly -> . EXACTLY LPAR rel COMMA LABEL COMMA proposition RPAR
    (62) exactly -> . EXACTLY LPAR INT COMMA LABEL COMMA proposition RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    ALL             shift and go to state 40
    NONE            shift and go to state 41
    SOME            shift and go to state 42
    NTH             shift and go to state 43
    ATLEAST         shift and go to state 44
    ATMOST          shift and go to state 45
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    EXACTLY         shift and go to state 47
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    logic                          shift and go to state 64
    proposition                    shift and go to state 50
    how_many                       shift and go to state 51
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    exactly                        shift and go to state 46
    num                            shift and go to state 61

state 30

    (28) property -> PROPERTY LPAR . term COMMA LSPAR t_list RSPAR RPAR STOP
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    LABEL           shift and go to state 58
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    term                           shift and go to state 65
    num                            shift and go to state 61

state 31

    (19) group -> GROUP LPAR LABEL . RPAR STOP

    RPAR            shift and go to state 66


state 32

    (20) group -> GROUP LPAR rest . RPAR STOP

    RPAR            shift and go to state 67


state 33

    (22) rest -> REST . LPAR LABEL RPAR

    LPAR            shift and go to state 68


state 34

    (23) take -> TAKE LPAR LABEL . COMMA LABEL COMMA INT RPAR STOP

    COMMA           shift and go to state 69


state 35

    (24) take -> TAKE LPAR rest . COMMA LABEL COMMA INT RPAR STOP

    COMMA           shift and go to state 70


state 36

    (25) take_wr -> TAKE_WR LPAR LABEL . COMMA LABEL COMMA INT RPAR STOP

    COMMA           shift and go to state 71


state 37

    (26) take_wr -> TAKE_WR LPAR rest . COMMA LABEL COMMA INT RPAR STOP

    COMMA           shift and go to state 72


state 38

    (21) size -> SIZE LPAR LABEL . COMMA INT RPAR STOP

    COMMA           shift and go to state 73


state 39

    (27) given -> GIVEN LPAR how_many . RPAR STOP

    RPAR            shift and go to state 74


state 40

    (36) how_many -> ALL . LPAR LABEL COMMA proposition RPAR

    LPAR            shift and go to state 75


state 41

    (37) how_many -> NONE . LPAR LABEL COMMA proposition RPAR

    LPAR            shift and go to state 76


state 42

    (38) how_many -> SOME . LPAR LABEL COMMA proposition RPAR

    LPAR            shift and go to state 77


state 43

    (39) how_many -> NTH . LPAR INT COMMA LABEL COMMA proposition RPAR

    LPAR            shift and go to state 78


state 44

    (40) how_many -> ATLEAST . LPAR INT COMMA LABEL COMMA proposition RPAR

    LPAR            shift and go to state 79


state 45

    (41) how_many -> ATMOST . LPAR INT COMMA LABEL COMMA proposition RPAR

    LPAR            shift and go to state 80


state 46

    (42) how_many -> exactly .

    RPAR            reduce using rule 42 (how_many -> exactly .)
    COMMA           reduce using rule 42 (how_many -> exactly .)


state 47

    (61) exactly -> EXACTLY . LPAR rel COMMA LABEL COMMA proposition RPAR
    (62) exactly -> EXACTLY . LPAR INT COMMA LABEL COMMA proposition RPAR

    LPAR            shift and go to state 81


state 48

    (63) union -> UNION LPAR LABEL . COMMA LSPAR t_list RSPAR RPAR STOP

    COMMA           shift and go to state 82


state 49

    (67) observe -> OBSERVE LPAR logic . RPAR STOP

    RPAR            shift and go to state 83


state 50

    (43) logic -> proposition .

    RPAR            reduce using rule 43 (logic -> proposition .)
    COMMA           reduce using rule 43 (logic -> proposition .)


state 51

    (44) logic -> how_many .

    RPAR            reduce using rule 44 (logic -> how_many .)
    COMMA           reduce using rule 44 (logic -> how_many .)


state 52

    (29) proposition -> term .

    RPAR            reduce using rule 29 (proposition -> term .)
    COMMA           reduce using rule 29 (proposition -> term .)


state 53

    (30) proposition -> AND . LPAR logic COMMA logic RPAR

    LPAR            shift and go to state 84


state 54

    (31) proposition -> OR . LPAR logic COMMA logic RPAR

    LPAR            shift and go to state 85


state 55

    (32) proposition -> NOT . LPAR logic RPAR

    LPAR            shift and go to state 86


state 56

    (33) proposition -> aggcmp .

    RPAR            reduce using rule 33 (proposition -> aggcmp .)
    COMMA           reduce using rule 33 (proposition -> aggcmp .)


state 57

    (34) proposition -> ALLSAME . LPAR LABEL COMMA term RPAR

    LPAR            shift and go to state 87


state 58

    (13) term -> LABEL .
    (14) term -> LABEL . LPAR t_list RPAR

    RPAR            reduce using rule 13 (term -> LABEL .)
    COMMA           reduce using rule 13 (term -> LABEL .)
    RSPAR           reduce using rule 13 (term -> LABEL .)
    LPAR            shift and go to state 88


state 59

    (35) proposition -> ALLDIFF . LPAR LABEL COMMA term RPAR

    LPAR            shift and go to state 89


state 60

    (15) num -> INT .

    RPAR            reduce using rule 15 (num -> INT .)
    COMMA           reduce using rule 15 (num -> INT .)
    RSPAR           reduce using rule 15 (num -> INT .)
    DIVIDE          reduce using rule 15 (num -> INT .)


state 61

    (12) term -> num .

    RPAR            reduce using rule 12 (term -> num .)
    COMMA           reduce using rule 12 (term -> num .)
    RSPAR           reduce using rule 12 (term -> num .)


state 62

    (64) aggcmp -> AGGCMP . LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> AGGCMP . LPAR LABEL COMMA term COMMA op COMMA short RPAR

    LPAR            shift and go to state 90


state 63

    (16) num -> FLOAT .

    RPAR            reduce using rule 16 (num -> FLOAT .)
    COMMA           reduce using rule 16 (num -> FLOAT .)
    RSPAR           reduce using rule 16 (num -> FLOAT .)


state 64

    (66) probability -> PROBABILITY LPAR logic . RPAR STOP

    RPAR            shift and go to state 91


state 65

    (28) property -> PROPERTY LPAR term . COMMA LSPAR t_list RSPAR RPAR STOP

    COMMA           shift and go to state 92


state 66

    (19) group -> GROUP LPAR LABEL RPAR . STOP

    STOP            shift and go to state 93


state 67

    (20) group -> GROUP LPAR rest RPAR . STOP

    STOP            shift and go to state 94


state 68

    (22) rest -> REST LPAR . LABEL RPAR

    LABEL           shift and go to state 95


state 69

    (23) take -> TAKE LPAR LABEL COMMA . LABEL COMMA INT RPAR STOP

    LABEL           shift and go to state 96


state 70

    (24) take -> TAKE LPAR rest COMMA . LABEL COMMA INT RPAR STOP

    LABEL           shift and go to state 97


state 71

    (25) take_wr -> TAKE_WR LPAR LABEL COMMA . LABEL COMMA INT RPAR STOP

    LABEL           shift and go to state 98


state 72

    (26) take_wr -> TAKE_WR LPAR rest COMMA . LABEL COMMA INT RPAR STOP

    LABEL           shift and go to state 99


state 73

    (21) size -> SIZE LPAR LABEL COMMA . INT RPAR STOP

    INT             shift and go to state 100


state 74

    (27) given -> GIVEN LPAR how_many RPAR . STOP

    STOP            shift and go to state 101


state 75

    (36) how_many -> ALL LPAR . LABEL COMMA proposition RPAR

    LABEL           shift and go to state 102


state 76

    (37) how_many -> NONE LPAR . LABEL COMMA proposition RPAR

    LABEL           shift and go to state 103


state 77

    (38) how_many -> SOME LPAR . LABEL COMMA proposition RPAR

    LABEL           shift and go to state 104


state 78

    (39) how_many -> NTH LPAR . INT COMMA LABEL COMMA proposition RPAR

    INT             shift and go to state 105


state 79

    (40) how_many -> ATLEAST LPAR . INT COMMA LABEL COMMA proposition RPAR

    INT             shift and go to state 106


state 80

    (41) how_many -> ATMOST LPAR . INT COMMA LABEL COMMA proposition RPAR

    INT             shift and go to state 107


state 81

    (61) exactly -> EXACTLY LPAR . rel COMMA LABEL COMMA proposition RPAR
    (62) exactly -> EXACTLY LPAR . INT COMMA LABEL COMMA proposition RPAR
    (56) rel -> . REL LPAR num DIVIDE num COMMA t_list RPAR
    (57) rel -> . REL LPAR FLOAT COMMA t_list RPAR

    INT             shift and go to state 109
    REL             shift and go to state 110

    rel                            shift and go to state 108

state 82

    (63) union -> UNION LPAR LABEL COMMA . LSPAR t_list RSPAR RPAR STOP

    LSPAR           shift and go to state 111


state 83

    (67) observe -> OBSERVE LPAR logic RPAR . STOP

    STOP            shift and go to state 112


state 84

    (30) proposition -> AND LPAR . logic COMMA logic RPAR
    (43) logic -> . proposition
    (44) logic -> . how_many
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (36) how_many -> . ALL LPAR LABEL COMMA proposition RPAR
    (37) how_many -> . NONE LPAR LABEL COMMA proposition RPAR
    (38) how_many -> . SOME LPAR LABEL COMMA proposition RPAR
    (39) how_many -> . NTH LPAR INT COMMA LABEL COMMA proposition RPAR
    (40) how_many -> . ATLEAST LPAR INT COMMA LABEL COMMA proposition RPAR
    (41) how_many -> . ATMOST LPAR INT COMMA LABEL COMMA proposition RPAR
    (42) how_many -> . exactly
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (61) exactly -> . EXACTLY LPAR rel COMMA LABEL COMMA proposition RPAR
    (62) exactly -> . EXACTLY LPAR INT COMMA LABEL COMMA proposition RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    ALL             shift and go to state 40
    NONE            shift and go to state 41
    SOME            shift and go to state 42
    NTH             shift and go to state 43
    ATLEAST         shift and go to state 44
    ATMOST          shift and go to state 45
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    EXACTLY         shift and go to state 47
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    logic                          shift and go to state 113
    proposition                    shift and go to state 50
    how_many                       shift and go to state 51
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    exactly                        shift and go to state 46
    num                            shift and go to state 61

state 85

    (31) proposition -> OR LPAR . logic COMMA logic RPAR
    (43) logic -> . proposition
    (44) logic -> . how_many
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (36) how_many -> . ALL LPAR LABEL COMMA proposition RPAR
    (37) how_many -> . NONE LPAR LABEL COMMA proposition RPAR
    (38) how_many -> . SOME LPAR LABEL COMMA proposition RPAR
    (39) how_many -> . NTH LPAR INT COMMA LABEL COMMA proposition RPAR
    (40) how_many -> . ATLEAST LPAR INT COMMA LABEL COMMA proposition RPAR
    (41) how_many -> . ATMOST LPAR INT COMMA LABEL COMMA proposition RPAR
    (42) how_many -> . exactly
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (61) exactly -> . EXACTLY LPAR rel COMMA LABEL COMMA proposition RPAR
    (62) exactly -> . EXACTLY LPAR INT COMMA LABEL COMMA proposition RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    ALL             shift and go to state 40
    NONE            shift and go to state 41
    SOME            shift and go to state 42
    NTH             shift and go to state 43
    ATLEAST         shift and go to state 44
    ATMOST          shift and go to state 45
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    EXACTLY         shift and go to state 47
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    logic                          shift and go to state 114
    proposition                    shift and go to state 50
    how_many                       shift and go to state 51
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    exactly                        shift and go to state 46
    num                            shift and go to state 61

state 86

    (32) proposition -> NOT LPAR . logic RPAR
    (43) logic -> . proposition
    (44) logic -> . how_many
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (36) how_many -> . ALL LPAR LABEL COMMA proposition RPAR
    (37) how_many -> . NONE LPAR LABEL COMMA proposition RPAR
    (38) how_many -> . SOME LPAR LABEL COMMA proposition RPAR
    (39) how_many -> . NTH LPAR INT COMMA LABEL COMMA proposition RPAR
    (40) how_many -> . ATLEAST LPAR INT COMMA LABEL COMMA proposition RPAR
    (41) how_many -> . ATMOST LPAR INT COMMA LABEL COMMA proposition RPAR
    (42) how_many -> . exactly
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (61) exactly -> . EXACTLY LPAR rel COMMA LABEL COMMA proposition RPAR
    (62) exactly -> . EXACTLY LPAR INT COMMA LABEL COMMA proposition RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    ALL             shift and go to state 40
    NONE            shift and go to state 41
    SOME            shift and go to state 42
    NTH             shift and go to state 43
    ATLEAST         shift and go to state 44
    ATMOST          shift and go to state 45
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    EXACTLY         shift and go to state 47
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    logic                          shift and go to state 115
    proposition                    shift and go to state 50
    how_many                       shift and go to state 51
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    exactly                        shift and go to state 46
    num                            shift and go to state 61

state 87

    (34) proposition -> ALLSAME LPAR . LABEL COMMA term RPAR

    LABEL           shift and go to state 116


state 88

    (14) term -> LABEL LPAR . t_list RPAR
    (17) t_list -> . term
    (18) t_list -> . term COMMA t_list
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    LABEL           shift and go to state 58
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    t_list                         shift and go to state 117
    term                           shift and go to state 118
    num                            shift and go to state 61

state 89

    (35) proposition -> ALLDIFF LPAR . LABEL COMMA term RPAR

    LABEL           shift and go to state 119


state 90

    (64) aggcmp -> AGGCMP LPAR . LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> AGGCMP LPAR . LABEL COMMA term COMMA op COMMA short RPAR

    LABEL           shift and go to state 120


state 91

    (66) probability -> PROBABILITY LPAR logic RPAR . STOP

    STOP            shift and go to state 121


state 92

    (28) property -> PROPERTY LPAR term COMMA . LSPAR t_list RSPAR RPAR STOP

    LSPAR           shift and go to state 122


state 93

    (19) group -> GROUP LPAR LABEL RPAR STOP .

    GROUP           reduce using rule 19 (group -> GROUP LPAR LABEL RPAR STOP .)
    TAKE            reduce using rule 19 (group -> GROUP LPAR LABEL RPAR STOP .)
    TAKE_WR         reduce using rule 19 (group -> GROUP LPAR LABEL RPAR STOP .)
    SIZE            reduce using rule 19 (group -> GROUP LPAR LABEL RPAR STOP .)
    GIVEN           reduce using rule 19 (group -> GROUP LPAR LABEL RPAR STOP .)
    UNION           reduce using rule 19 (group -> GROUP LPAR LABEL RPAR STOP .)
    OBSERVE         reduce using rule 19 (group -> GROUP LPAR LABEL RPAR STOP .)
    PROBABILITY     reduce using rule 19 (group -> GROUP LPAR LABEL RPAR STOP .)
    PROPERTY        reduce using rule 19 (group -> GROUP LPAR LABEL RPAR STOP .)
    $end            reduce using rule 19 (group -> GROUP LPAR LABEL RPAR STOP .)


state 94

    (20) group -> GROUP LPAR rest RPAR STOP .

    GROUP           reduce using rule 20 (group -> GROUP LPAR rest RPAR STOP .)
    TAKE            reduce using rule 20 (group -> GROUP LPAR rest RPAR STOP .)
    TAKE_WR         reduce using rule 20 (group -> GROUP LPAR rest RPAR STOP .)
    SIZE            reduce using rule 20 (group -> GROUP LPAR rest RPAR STOP .)
    GIVEN           reduce using rule 20 (group -> GROUP LPAR rest RPAR STOP .)
    UNION           reduce using rule 20 (group -> GROUP LPAR rest RPAR STOP .)
    OBSERVE         reduce using rule 20 (group -> GROUP LPAR rest RPAR STOP .)
    PROBABILITY     reduce using rule 20 (group -> GROUP LPAR rest RPAR STOP .)
    PROPERTY        reduce using rule 20 (group -> GROUP LPAR rest RPAR STOP .)
    $end            reduce using rule 20 (group -> GROUP LPAR rest RPAR STOP .)


state 95

    (22) rest -> REST LPAR LABEL . RPAR

    RPAR            shift and go to state 123


state 96

    (23) take -> TAKE LPAR LABEL COMMA LABEL . COMMA INT RPAR STOP

    COMMA           shift and go to state 124


state 97

    (24) take -> TAKE LPAR rest COMMA LABEL . COMMA INT RPAR STOP

    COMMA           shift and go to state 125


state 98

    (25) take_wr -> TAKE_WR LPAR LABEL COMMA LABEL . COMMA INT RPAR STOP

    COMMA           shift and go to state 126


state 99

    (26) take_wr -> TAKE_WR LPAR rest COMMA LABEL . COMMA INT RPAR STOP

    COMMA           shift and go to state 127


state 100

    (21) size -> SIZE LPAR LABEL COMMA INT . RPAR STOP

    RPAR            shift and go to state 128


state 101

    (27) given -> GIVEN LPAR how_many RPAR STOP .

    GROUP           reduce using rule 27 (given -> GIVEN LPAR how_many RPAR STOP .)
    TAKE            reduce using rule 27 (given -> GIVEN LPAR how_many RPAR STOP .)
    TAKE_WR         reduce using rule 27 (given -> GIVEN LPAR how_many RPAR STOP .)
    SIZE            reduce using rule 27 (given -> GIVEN LPAR how_many RPAR STOP .)
    GIVEN           reduce using rule 27 (given -> GIVEN LPAR how_many RPAR STOP .)
    UNION           reduce using rule 27 (given -> GIVEN LPAR how_many RPAR STOP .)
    OBSERVE         reduce using rule 27 (given -> GIVEN LPAR how_many RPAR STOP .)
    PROBABILITY     reduce using rule 27 (given -> GIVEN LPAR how_many RPAR STOP .)
    PROPERTY        reduce using rule 27 (given -> GIVEN LPAR how_many RPAR STOP .)
    $end            reduce using rule 27 (given -> GIVEN LPAR how_many RPAR STOP .)


state 102

    (36) how_many -> ALL LPAR LABEL . COMMA proposition RPAR

    COMMA           shift and go to state 129


state 103

    (37) how_many -> NONE LPAR LABEL . COMMA proposition RPAR

    COMMA           shift and go to state 130


state 104

    (38) how_many -> SOME LPAR LABEL . COMMA proposition RPAR

    COMMA           shift and go to state 131


state 105

    (39) how_many -> NTH LPAR INT . COMMA LABEL COMMA proposition RPAR

    COMMA           shift and go to state 132


state 106

    (40) how_many -> ATLEAST LPAR INT . COMMA LABEL COMMA proposition RPAR

    COMMA           shift and go to state 133


state 107

    (41) how_many -> ATMOST LPAR INT . COMMA LABEL COMMA proposition RPAR

    COMMA           shift and go to state 134


state 108

    (61) exactly -> EXACTLY LPAR rel . COMMA LABEL COMMA proposition RPAR

    COMMA           shift and go to state 135


state 109

    (62) exactly -> EXACTLY LPAR INT . COMMA LABEL COMMA proposition RPAR

    COMMA           shift and go to state 136


state 110

    (56) rel -> REL . LPAR num DIVIDE num COMMA t_list RPAR
    (57) rel -> REL . LPAR FLOAT COMMA t_list RPAR

    LPAR            shift and go to state 137


state 111

    (63) union -> UNION LPAR LABEL COMMA LSPAR . t_list RSPAR RPAR STOP
    (17) t_list -> . term
    (18) t_list -> . term COMMA t_list
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    LABEL           shift and go to state 58
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    t_list                         shift and go to state 138
    term                           shift and go to state 118
    num                            shift and go to state 61

state 112

    (67) observe -> OBSERVE LPAR logic RPAR STOP .

    GROUP           reduce using rule 67 (observe -> OBSERVE LPAR logic RPAR STOP .)
    TAKE            reduce using rule 67 (observe -> OBSERVE LPAR logic RPAR STOP .)
    TAKE_WR         reduce using rule 67 (observe -> OBSERVE LPAR logic RPAR STOP .)
    SIZE            reduce using rule 67 (observe -> OBSERVE LPAR logic RPAR STOP .)
    GIVEN           reduce using rule 67 (observe -> OBSERVE LPAR logic RPAR STOP .)
    UNION           reduce using rule 67 (observe -> OBSERVE LPAR logic RPAR STOP .)
    OBSERVE         reduce using rule 67 (observe -> OBSERVE LPAR logic RPAR STOP .)
    PROBABILITY     reduce using rule 67 (observe -> OBSERVE LPAR logic RPAR STOP .)
    PROPERTY        reduce using rule 67 (observe -> OBSERVE LPAR logic RPAR STOP .)
    $end            reduce using rule 67 (observe -> OBSERVE LPAR logic RPAR STOP .)


state 113

    (30) proposition -> AND LPAR logic . COMMA logic RPAR

    COMMA           shift and go to state 139


state 114

    (31) proposition -> OR LPAR logic . COMMA logic RPAR

    COMMA           shift and go to state 140


state 115

    (32) proposition -> NOT LPAR logic . RPAR

    RPAR            shift and go to state 141


state 116

    (34) proposition -> ALLSAME LPAR LABEL . COMMA term RPAR

    COMMA           shift and go to state 142


state 117

    (14) term -> LABEL LPAR t_list . RPAR

    RPAR            shift and go to state 143


state 118

    (17) t_list -> term .
    (18) t_list -> term . COMMA t_list

    RPAR            reduce using rule 17 (t_list -> term .)
    RSPAR           reduce using rule 17 (t_list -> term .)
    COMMA           shift and go to state 144


state 119

    (35) proposition -> ALLDIFF LPAR LABEL . COMMA term RPAR

    COMMA           shift and go to state 145


state 120

    (64) aggcmp -> AGGCMP LPAR LABEL . COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> AGGCMP LPAR LABEL . COMMA term COMMA op COMMA short RPAR

    COMMA           shift and go to state 146


state 121

    (66) probability -> PROBABILITY LPAR logic RPAR STOP .

    GROUP           reduce using rule 66 (probability -> PROBABILITY LPAR logic RPAR STOP .)
    TAKE            reduce using rule 66 (probability -> PROBABILITY LPAR logic RPAR STOP .)
    TAKE_WR         reduce using rule 66 (probability -> PROBABILITY LPAR logic RPAR STOP .)
    SIZE            reduce using rule 66 (probability -> PROBABILITY LPAR logic RPAR STOP .)
    GIVEN           reduce using rule 66 (probability -> PROBABILITY LPAR logic RPAR STOP .)
    UNION           reduce using rule 66 (probability -> PROBABILITY LPAR logic RPAR STOP .)
    OBSERVE         reduce using rule 66 (probability -> PROBABILITY LPAR logic RPAR STOP .)
    PROBABILITY     reduce using rule 66 (probability -> PROBABILITY LPAR logic RPAR STOP .)
    PROPERTY        reduce using rule 66 (probability -> PROBABILITY LPAR logic RPAR STOP .)
    $end            reduce using rule 66 (probability -> PROBABILITY LPAR logic RPAR STOP .)


state 122

    (28) property -> PROPERTY LPAR term COMMA LSPAR . t_list RSPAR RPAR STOP
    (17) t_list -> . term
    (18) t_list -> . term COMMA t_list
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    LABEL           shift and go to state 58
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    term                           shift and go to state 118
    t_list                         shift and go to state 147
    num                            shift and go to state 61

state 123

    (22) rest -> REST LPAR LABEL RPAR .

    RPAR            reduce using rule 22 (rest -> REST LPAR LABEL RPAR .)
    COMMA           reduce using rule 22 (rest -> REST LPAR LABEL RPAR .)


state 124

    (23) take -> TAKE LPAR LABEL COMMA LABEL COMMA . INT RPAR STOP

    INT             shift and go to state 148


state 125

    (24) take -> TAKE LPAR rest COMMA LABEL COMMA . INT RPAR STOP

    INT             shift and go to state 149


state 126

    (25) take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA . INT RPAR STOP

    INT             shift and go to state 150


state 127

    (26) take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA . INT RPAR STOP

    INT             shift and go to state 151


state 128

    (21) size -> SIZE LPAR LABEL COMMA INT RPAR . STOP

    STOP            shift and go to state 152


state 129

    (36) how_many -> ALL LPAR LABEL COMMA . proposition RPAR
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    proposition                    shift and go to state 153
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    num                            shift and go to state 61

state 130

    (37) how_many -> NONE LPAR LABEL COMMA . proposition RPAR
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    proposition                    shift and go to state 154
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    num                            shift and go to state 61

state 131

    (38) how_many -> SOME LPAR LABEL COMMA . proposition RPAR
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    proposition                    shift and go to state 155
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    num                            shift and go to state 61

state 132

    (39) how_many -> NTH LPAR INT COMMA . LABEL COMMA proposition RPAR

    LABEL           shift and go to state 156


state 133

    (40) how_many -> ATLEAST LPAR INT COMMA . LABEL COMMA proposition RPAR

    LABEL           shift and go to state 157


state 134

    (41) how_many -> ATMOST LPAR INT COMMA . LABEL COMMA proposition RPAR

    LABEL           shift and go to state 158


state 135

    (61) exactly -> EXACTLY LPAR rel COMMA . LABEL COMMA proposition RPAR

    LABEL           shift and go to state 159


state 136

    (62) exactly -> EXACTLY LPAR INT COMMA . LABEL COMMA proposition RPAR

    LABEL           shift and go to state 160


state 137

    (56) rel -> REL LPAR . num DIVIDE num COMMA t_list RPAR
    (57) rel -> REL LPAR . FLOAT COMMA t_list RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    FLOAT           shift and go to state 162
    INT             shift and go to state 60

    num                            shift and go to state 161

state 138

    (63) union -> UNION LPAR LABEL COMMA LSPAR t_list . RSPAR RPAR STOP

    RSPAR           shift and go to state 163


state 139

    (30) proposition -> AND LPAR logic COMMA . logic RPAR
    (43) logic -> . proposition
    (44) logic -> . how_many
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (36) how_many -> . ALL LPAR LABEL COMMA proposition RPAR
    (37) how_many -> . NONE LPAR LABEL COMMA proposition RPAR
    (38) how_many -> . SOME LPAR LABEL COMMA proposition RPAR
    (39) how_many -> . NTH LPAR INT COMMA LABEL COMMA proposition RPAR
    (40) how_many -> . ATLEAST LPAR INT COMMA LABEL COMMA proposition RPAR
    (41) how_many -> . ATMOST LPAR INT COMMA LABEL COMMA proposition RPAR
    (42) how_many -> . exactly
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (61) exactly -> . EXACTLY LPAR rel COMMA LABEL COMMA proposition RPAR
    (62) exactly -> . EXACTLY LPAR INT COMMA LABEL COMMA proposition RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    ALL             shift and go to state 40
    NONE            shift and go to state 41
    SOME            shift and go to state 42
    NTH             shift and go to state 43
    ATLEAST         shift and go to state 44
    ATMOST          shift and go to state 45
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    EXACTLY         shift and go to state 47
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    logic                          shift and go to state 164
    proposition                    shift and go to state 50
    how_many                       shift and go to state 51
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    exactly                        shift and go to state 46
    num                            shift and go to state 61

state 140

    (31) proposition -> OR LPAR logic COMMA . logic RPAR
    (43) logic -> . proposition
    (44) logic -> . how_many
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (36) how_many -> . ALL LPAR LABEL COMMA proposition RPAR
    (37) how_many -> . NONE LPAR LABEL COMMA proposition RPAR
    (38) how_many -> . SOME LPAR LABEL COMMA proposition RPAR
    (39) how_many -> . NTH LPAR INT COMMA LABEL COMMA proposition RPAR
    (40) how_many -> . ATLEAST LPAR INT COMMA LABEL COMMA proposition RPAR
    (41) how_many -> . ATMOST LPAR INT COMMA LABEL COMMA proposition RPAR
    (42) how_many -> . exactly
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (61) exactly -> . EXACTLY LPAR rel COMMA LABEL COMMA proposition RPAR
    (62) exactly -> . EXACTLY LPAR INT COMMA LABEL COMMA proposition RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    ALL             shift and go to state 40
    NONE            shift and go to state 41
    SOME            shift and go to state 42
    NTH             shift and go to state 43
    ATLEAST         shift and go to state 44
    ATMOST          shift and go to state 45
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    EXACTLY         shift and go to state 47
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    logic                          shift and go to state 165
    proposition                    shift and go to state 50
    how_many                       shift and go to state 51
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    exactly                        shift and go to state 46
    num                            shift and go to state 61

state 141

    (32) proposition -> NOT LPAR logic RPAR .

    RPAR            reduce using rule 32 (proposition -> NOT LPAR logic RPAR .)
    COMMA           reduce using rule 32 (proposition -> NOT LPAR logic RPAR .)


state 142

    (34) proposition -> ALLSAME LPAR LABEL COMMA . term RPAR
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    LABEL           shift and go to state 58
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    term                           shift and go to state 166
    num                            shift and go to state 61

state 143

    (14) term -> LABEL LPAR t_list RPAR .

    RPAR            reduce using rule 14 (term -> LABEL LPAR t_list RPAR .)
    COMMA           reduce using rule 14 (term -> LABEL LPAR t_list RPAR .)
    RSPAR           reduce using rule 14 (term -> LABEL LPAR t_list RPAR .)


state 144

    (18) t_list -> term COMMA . t_list
    (17) t_list -> . term
    (18) t_list -> . term COMMA t_list
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    LABEL           shift and go to state 58
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    term                           shift and go to state 118
    t_list                         shift and go to state 167
    num                            shift and go to state 61

state 145

    (35) proposition -> ALLDIFF LPAR LABEL COMMA . term RPAR
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    LABEL           shift and go to state 58
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    term                           shift and go to state 168
    num                            shift and go to state 61

state 146

    (64) aggcmp -> AGGCMP LPAR LABEL COMMA . term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> AGGCMP LPAR LABEL COMMA . term COMMA op COMMA short RPAR
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    LABEL           shift and go to state 58
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    term                           shift and go to state 169
    num                            shift and go to state 61

state 147

    (28) property -> PROPERTY LPAR term COMMA LSPAR t_list . RSPAR RPAR STOP

    RSPAR           shift and go to state 170


state 148

    (23) take -> TAKE LPAR LABEL COMMA LABEL COMMA INT . RPAR STOP

    RPAR            shift and go to state 171


state 149

    (24) take -> TAKE LPAR rest COMMA LABEL COMMA INT . RPAR STOP

    RPAR            shift and go to state 172


state 150

    (25) take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT . RPAR STOP

    RPAR            shift and go to state 173


state 151

    (26) take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT . RPAR STOP

    RPAR            shift and go to state 174


state 152

    (21) size -> SIZE LPAR LABEL COMMA INT RPAR STOP .

    GROUP           reduce using rule 21 (size -> SIZE LPAR LABEL COMMA INT RPAR STOP .)
    TAKE            reduce using rule 21 (size -> SIZE LPAR LABEL COMMA INT RPAR STOP .)
    TAKE_WR         reduce using rule 21 (size -> SIZE LPAR LABEL COMMA INT RPAR STOP .)
    SIZE            reduce using rule 21 (size -> SIZE LPAR LABEL COMMA INT RPAR STOP .)
    GIVEN           reduce using rule 21 (size -> SIZE LPAR LABEL COMMA INT RPAR STOP .)
    UNION           reduce using rule 21 (size -> SIZE LPAR LABEL COMMA INT RPAR STOP .)
    OBSERVE         reduce using rule 21 (size -> SIZE LPAR LABEL COMMA INT RPAR STOP .)
    PROBABILITY     reduce using rule 21 (size -> SIZE LPAR LABEL COMMA INT RPAR STOP .)
    PROPERTY        reduce using rule 21 (size -> SIZE LPAR LABEL COMMA INT RPAR STOP .)
    $end            reduce using rule 21 (size -> SIZE LPAR LABEL COMMA INT RPAR STOP .)


state 153

    (36) how_many -> ALL LPAR LABEL COMMA proposition . RPAR

    RPAR            shift and go to state 175


state 154

    (37) how_many -> NONE LPAR LABEL COMMA proposition . RPAR

    RPAR            shift and go to state 176


state 155

    (38) how_many -> SOME LPAR LABEL COMMA proposition . RPAR

    RPAR            shift and go to state 177


state 156

    (39) how_many -> NTH LPAR INT COMMA LABEL . COMMA proposition RPAR

    COMMA           shift and go to state 178


state 157

    (40) how_many -> ATLEAST LPAR INT COMMA LABEL . COMMA proposition RPAR

    COMMA           shift and go to state 179


state 158

    (41) how_many -> ATMOST LPAR INT COMMA LABEL . COMMA proposition RPAR

    COMMA           shift and go to state 180


state 159

    (61) exactly -> EXACTLY LPAR rel COMMA LABEL . COMMA proposition RPAR

    COMMA           shift and go to state 181


state 160

    (62) exactly -> EXACTLY LPAR INT COMMA LABEL . COMMA proposition RPAR

    COMMA           shift and go to state 182


state 161

    (56) rel -> REL LPAR num . DIVIDE num COMMA t_list RPAR

    DIVIDE          shift and go to state 183


state 162

    (57) rel -> REL LPAR FLOAT . COMMA t_list RPAR
    (16) num -> FLOAT .

    COMMA           shift and go to state 184
    DIVIDE          reduce using rule 16 (num -> FLOAT .)


state 163

    (63) union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR . RPAR STOP

    RPAR            shift and go to state 185


state 164

    (30) proposition -> AND LPAR logic COMMA logic . RPAR

    RPAR            shift and go to state 186


state 165

    (31) proposition -> OR LPAR logic COMMA logic . RPAR

    RPAR            shift and go to state 187


state 166

    (34) proposition -> ALLSAME LPAR LABEL COMMA term . RPAR

    RPAR            shift and go to state 188


state 167

    (18) t_list -> term COMMA t_list .

    RPAR            reduce using rule 18 (t_list -> term COMMA t_list .)
    RSPAR           reduce using rule 18 (t_list -> term COMMA t_list .)


state 168

    (35) proposition -> ALLDIFF LPAR LABEL COMMA term . RPAR

    RPAR            shift and go to state 189


state 169

    (64) aggcmp -> AGGCMP LPAR LABEL COMMA term . COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> AGGCMP LPAR LABEL COMMA term . COMMA op COMMA short RPAR

    COMMA           shift and go to state 190


state 170

    (28) property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR . RPAR STOP

    RPAR            shift and go to state 191


state 171

    (23) take -> TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR . STOP

    STOP            shift and go to state 192


state 172

    (24) take -> TAKE LPAR rest COMMA LABEL COMMA INT RPAR . STOP

    STOP            shift and go to state 193


state 173

    (25) take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR . STOP

    STOP            shift and go to state 194


state 174

    (26) take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR . STOP

    STOP            shift and go to state 195


state 175

    (36) how_many -> ALL LPAR LABEL COMMA proposition RPAR .

    RPAR            reduce using rule 36 (how_many -> ALL LPAR LABEL COMMA proposition RPAR .)
    COMMA           reduce using rule 36 (how_many -> ALL LPAR LABEL COMMA proposition RPAR .)


state 176

    (37) how_many -> NONE LPAR LABEL COMMA proposition RPAR .

    RPAR            reduce using rule 37 (how_many -> NONE LPAR LABEL COMMA proposition RPAR .)
    COMMA           reduce using rule 37 (how_many -> NONE LPAR LABEL COMMA proposition RPAR .)


state 177

    (38) how_many -> SOME LPAR LABEL COMMA proposition RPAR .

    RPAR            reduce using rule 38 (how_many -> SOME LPAR LABEL COMMA proposition RPAR .)
    COMMA           reduce using rule 38 (how_many -> SOME LPAR LABEL COMMA proposition RPAR .)


state 178

    (39) how_many -> NTH LPAR INT COMMA LABEL COMMA . proposition RPAR
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    proposition                    shift and go to state 196
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    num                            shift and go to state 61

state 179

    (40) how_many -> ATLEAST LPAR INT COMMA LABEL COMMA . proposition RPAR
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    proposition                    shift and go to state 197
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    num                            shift and go to state 61

state 180

    (41) how_many -> ATMOST LPAR INT COMMA LABEL COMMA . proposition RPAR
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    proposition                    shift and go to state 198
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    num                            shift and go to state 61

state 181

    (61) exactly -> EXACTLY LPAR rel COMMA LABEL COMMA . proposition RPAR
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    proposition                    shift and go to state 199
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    num                            shift and go to state 61

state 182

    (62) exactly -> EXACTLY LPAR INT COMMA LABEL COMMA . proposition RPAR
    (29) proposition -> . term
    (30) proposition -> . AND LPAR logic COMMA logic RPAR
    (31) proposition -> . OR LPAR logic COMMA logic RPAR
    (32) proposition -> . NOT LPAR logic RPAR
    (33) proposition -> . aggcmp
    (34) proposition -> . ALLSAME LPAR LABEL COMMA term RPAR
    (35) proposition -> . ALLDIFF LPAR LABEL COMMA term RPAR
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (64) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR
    (65) aggcmp -> . AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    AND             shift and go to state 53
    OR              shift and go to state 54
    NOT             shift and go to state 55
    ALLSAME         shift and go to state 57
    ALLDIFF         shift and go to state 59
    LABEL           shift and go to state 58
    AGGCMP          shift and go to state 62
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    proposition                    shift and go to state 200
    term                           shift and go to state 52
    aggcmp                         shift and go to state 56
    num                            shift and go to state 61

state 183

    (56) rel -> REL LPAR num DIVIDE . num COMMA t_list RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    num                            shift and go to state 201

state 184

    (57) rel -> REL LPAR FLOAT COMMA . t_list RPAR
    (17) t_list -> . term
    (18) t_list -> . term COMMA t_list
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    LABEL           shift and go to state 58
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    t_list                         shift and go to state 202
    term                           shift and go to state 118
    num                            shift and go to state 61

state 185

    (63) union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR . STOP

    STOP            shift and go to state 203


state 186

    (30) proposition -> AND LPAR logic COMMA logic RPAR .

    RPAR            reduce using rule 30 (proposition -> AND LPAR logic COMMA logic RPAR .)
    COMMA           reduce using rule 30 (proposition -> AND LPAR logic COMMA logic RPAR .)


state 187

    (31) proposition -> OR LPAR logic COMMA logic RPAR .

    RPAR            reduce using rule 31 (proposition -> OR LPAR logic COMMA logic RPAR .)
    COMMA           reduce using rule 31 (proposition -> OR LPAR logic COMMA logic RPAR .)


state 188

    (34) proposition -> ALLSAME LPAR LABEL COMMA term RPAR .

    RPAR            reduce using rule 34 (proposition -> ALLSAME LPAR LABEL COMMA term RPAR .)
    COMMA           reduce using rule 34 (proposition -> ALLSAME LPAR LABEL COMMA term RPAR .)


state 189

    (35) proposition -> ALLDIFF LPAR LABEL COMMA term RPAR .

    RPAR            reduce using rule 35 (proposition -> ALLDIFF LPAR LABEL COMMA term RPAR .)
    COMMA           reduce using rule 35 (proposition -> ALLDIFF LPAR LABEL COMMA term RPAR .)


state 190

    (64) aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA . op COMMA comp COMMA INT RPAR
    (65) aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA . op COMMA short RPAR
    (45) op -> . SUM
    (46) op -> . MUL
    (47) op -> . MIN
    (48) op -> . MAX
    (49) op -> . AVERAGE

    SUM             shift and go to state 205
    MUL             shift and go to state 206
    MIN             shift and go to state 207
    MAX             shift and go to state 208
    AVERAGE         shift and go to state 209

    op                             shift and go to state 204

state 191

    (28) property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR . STOP

    STOP            shift and go to state 210


state 192

    (23) take -> TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .

    GROUP           reduce using rule 23 (take -> TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    TAKE            reduce using rule 23 (take -> TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    TAKE_WR         reduce using rule 23 (take -> TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    SIZE            reduce using rule 23 (take -> TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    GIVEN           reduce using rule 23 (take -> TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    UNION           reduce using rule 23 (take -> TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    OBSERVE         reduce using rule 23 (take -> TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    PROBABILITY     reduce using rule 23 (take -> TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    PROPERTY        reduce using rule 23 (take -> TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    $end            reduce using rule 23 (take -> TAKE LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)


state 193

    (24) take -> TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP .

    GROUP           reduce using rule 24 (take -> TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    TAKE            reduce using rule 24 (take -> TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    TAKE_WR         reduce using rule 24 (take -> TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    SIZE            reduce using rule 24 (take -> TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    GIVEN           reduce using rule 24 (take -> TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    UNION           reduce using rule 24 (take -> TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    OBSERVE         reduce using rule 24 (take -> TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    PROBABILITY     reduce using rule 24 (take -> TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    PROPERTY        reduce using rule 24 (take -> TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    $end            reduce using rule 24 (take -> TAKE LPAR rest COMMA LABEL COMMA INT RPAR STOP .)


state 194

    (25) take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .

    GROUP           reduce using rule 25 (take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    TAKE            reduce using rule 25 (take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    TAKE_WR         reduce using rule 25 (take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    SIZE            reduce using rule 25 (take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    GIVEN           reduce using rule 25 (take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    UNION           reduce using rule 25 (take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    OBSERVE         reduce using rule 25 (take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    PROBABILITY     reduce using rule 25 (take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    PROPERTY        reduce using rule 25 (take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)
    $end            reduce using rule 25 (take_wr -> TAKE_WR LPAR LABEL COMMA LABEL COMMA INT RPAR STOP .)


state 195

    (26) take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP .

    GROUP           reduce using rule 26 (take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    TAKE            reduce using rule 26 (take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    TAKE_WR         reduce using rule 26 (take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    SIZE            reduce using rule 26 (take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    GIVEN           reduce using rule 26 (take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    UNION           reduce using rule 26 (take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    OBSERVE         reduce using rule 26 (take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    PROBABILITY     reduce using rule 26 (take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    PROPERTY        reduce using rule 26 (take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP .)
    $end            reduce using rule 26 (take_wr -> TAKE_WR LPAR rest COMMA LABEL COMMA INT RPAR STOP .)


state 196

    (39) how_many -> NTH LPAR INT COMMA LABEL COMMA proposition . RPAR

    RPAR            shift and go to state 211


state 197

    (40) how_many -> ATLEAST LPAR INT COMMA LABEL COMMA proposition . RPAR

    RPAR            shift and go to state 212


state 198

    (41) how_many -> ATMOST LPAR INT COMMA LABEL COMMA proposition . RPAR

    RPAR            shift and go to state 213


state 199

    (61) exactly -> EXACTLY LPAR rel COMMA LABEL COMMA proposition . RPAR

    RPAR            shift and go to state 214


state 200

    (62) exactly -> EXACTLY LPAR INT COMMA LABEL COMMA proposition . RPAR

    RPAR            shift and go to state 215


state 201

    (56) rel -> REL LPAR num DIVIDE num . COMMA t_list RPAR

    COMMA           shift and go to state 216


state 202

    (57) rel -> REL LPAR FLOAT COMMA t_list . RPAR

    RPAR            shift and go to state 217


state 203

    (63) union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP .

    GROUP           reduce using rule 63 (union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP .)
    TAKE            reduce using rule 63 (union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP .)
    TAKE_WR         reduce using rule 63 (union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP .)
    SIZE            reduce using rule 63 (union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP .)
    GIVEN           reduce using rule 63 (union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP .)
    UNION           reduce using rule 63 (union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP .)
    OBSERVE         reduce using rule 63 (union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP .)
    PROBABILITY     reduce using rule 63 (union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP .)
    PROPERTY        reduce using rule 63 (union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP .)
    $end            reduce using rule 63 (union -> UNION LPAR LABEL COMMA LSPAR t_list RSPAR RPAR STOP .)


state 204

    (64) aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op . COMMA comp COMMA INT RPAR
    (65) aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op . COMMA short RPAR

    COMMA           shift and go to state 218


state 205

    (45) op -> SUM .

    COMMA           reduce using rule 45 (op -> SUM .)


state 206

    (46) op -> MUL .

    COMMA           reduce using rule 46 (op -> MUL .)


state 207

    (47) op -> MIN .

    COMMA           reduce using rule 47 (op -> MIN .)


state 208

    (48) op -> MAX .

    COMMA           reduce using rule 48 (op -> MAX .)


state 209

    (49) op -> AVERAGE .

    COMMA           reduce using rule 49 (op -> AVERAGE .)


state 210

    (28) property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP .

    GROUP           reduce using rule 28 (property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP .)
    TAKE            reduce using rule 28 (property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP .)
    TAKE_WR         reduce using rule 28 (property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP .)
    SIZE            reduce using rule 28 (property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP .)
    GIVEN           reduce using rule 28 (property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP .)
    UNION           reduce using rule 28 (property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP .)
    OBSERVE         reduce using rule 28 (property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP .)
    PROBABILITY     reduce using rule 28 (property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP .)
    PROPERTY        reduce using rule 28 (property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP .)
    $end            reduce using rule 28 (property -> PROPERTY LPAR term COMMA LSPAR t_list RSPAR RPAR STOP .)


state 211

    (39) how_many -> NTH LPAR INT COMMA LABEL COMMA proposition RPAR .

    RPAR            reduce using rule 39 (how_many -> NTH LPAR INT COMMA LABEL COMMA proposition RPAR .)
    COMMA           reduce using rule 39 (how_many -> NTH LPAR INT COMMA LABEL COMMA proposition RPAR .)


state 212

    (40) how_many -> ATLEAST LPAR INT COMMA LABEL COMMA proposition RPAR .

    RPAR            reduce using rule 40 (how_many -> ATLEAST LPAR INT COMMA LABEL COMMA proposition RPAR .)
    COMMA           reduce using rule 40 (how_many -> ATLEAST LPAR INT COMMA LABEL COMMA proposition RPAR .)


state 213

    (41) how_many -> ATMOST LPAR INT COMMA LABEL COMMA proposition RPAR .

    RPAR            reduce using rule 41 (how_many -> ATMOST LPAR INT COMMA LABEL COMMA proposition RPAR .)
    COMMA           reduce using rule 41 (how_many -> ATMOST LPAR INT COMMA LABEL COMMA proposition RPAR .)


state 214

    (61) exactly -> EXACTLY LPAR rel COMMA LABEL COMMA proposition RPAR .

    RPAR            reduce using rule 61 (exactly -> EXACTLY LPAR rel COMMA LABEL COMMA proposition RPAR .)
    COMMA           reduce using rule 61 (exactly -> EXACTLY LPAR rel COMMA LABEL COMMA proposition RPAR .)


state 215

    (62) exactly -> EXACTLY LPAR INT COMMA LABEL COMMA proposition RPAR .

    RPAR            reduce using rule 62 (exactly -> EXACTLY LPAR INT COMMA LABEL COMMA proposition RPAR .)
    COMMA           reduce using rule 62 (exactly -> EXACTLY LPAR INT COMMA LABEL COMMA proposition RPAR .)


state 216

    (56) rel -> REL LPAR num DIVIDE num COMMA . t_list RPAR
    (17) t_list -> . term
    (18) t_list -> . term COMMA t_list
    (12) term -> . num
    (13) term -> . LABEL
    (14) term -> . LABEL LPAR t_list RPAR
    (15) num -> . INT
    (16) num -> . FLOAT

    LABEL           shift and go to state 58
    INT             shift and go to state 60
    FLOAT           shift and go to state 63

    num                            shift and go to state 61
    t_list                         shift and go to state 219
    term                           shift and go to state 118

state 217

    (57) rel -> REL LPAR FLOAT COMMA t_list RPAR .

    COMMA           reduce using rule 57 (rel -> REL LPAR FLOAT COMMA t_list RPAR .)


state 218

    (64) aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA . comp COMMA INT RPAR
    (65) aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA . short RPAR
    (50) comp -> . EQUALS SEMI EQUALS
    (51) comp -> . LT
    (52) comp -> . GT
    (53) comp -> . GT EQUALS
    (54) comp -> . EQUALS LT
    (55) comp -> . EQUALS SLASH EQUALS
    (58) short -> . EVEN
    (59) short -> . ODD
    (60) short -> . PRIME

    EQUALS          shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 224
    EVEN            shift and go to state 225
    ODD             shift and go to state 226
    PRIME           shift and go to state 227

    comp                           shift and go to state 220
    short                          shift and go to state 221

state 219

    (56) rel -> REL LPAR num DIVIDE num COMMA t_list . RPAR

    RPAR            shift and go to state 228


state 220

    (64) aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp . COMMA INT RPAR

    COMMA           shift and go to state 229


state 221

    (65) aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA short . RPAR

    RPAR            shift and go to state 230


state 222

    (50) comp -> EQUALS . SEMI EQUALS
    (54) comp -> EQUALS . LT
    (55) comp -> EQUALS . SLASH EQUALS

    SEMI            shift and go to state 231
    LT              shift and go to state 232
    SLASH           shift and go to state 233


state 223

    (51) comp -> LT .

    COMMA           reduce using rule 51 (comp -> LT .)


state 224

    (52) comp -> GT .
    (53) comp -> GT . EQUALS

    COMMA           reduce using rule 52 (comp -> GT .)
    EQUALS          shift and go to state 234


state 225

    (58) short -> EVEN .

    RPAR            reduce using rule 58 (short -> EVEN .)


state 226

    (59) short -> ODD .

    RPAR            reduce using rule 59 (short -> ODD .)


state 227

    (60) short -> PRIME .

    RPAR            reduce using rule 60 (short -> PRIME .)


state 228

    (56) rel -> REL LPAR num DIVIDE num COMMA t_list RPAR .

    COMMA           reduce using rule 56 (rel -> REL LPAR num DIVIDE num COMMA t_list RPAR .)


state 229

    (64) aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA . INT RPAR

    INT             shift and go to state 235


state 230

    (65) aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR .

    RPAR            reduce using rule 65 (aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR .)
    COMMA           reduce using rule 65 (aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA short RPAR .)


state 231

    (50) comp -> EQUALS SEMI . EQUALS

    EQUALS          shift and go to state 236


state 232

    (54) comp -> EQUALS LT .

    COMMA           reduce using rule 54 (comp -> EQUALS LT .)


state 233

    (55) comp -> EQUALS SLASH . EQUALS

    EQUALS          shift and go to state 237


state 234

    (53) comp -> GT EQUALS .

    COMMA           reduce using rule 53 (comp -> GT EQUALS .)


state 235

    (64) aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT . RPAR

    RPAR            shift and go to state 238


state 236

    (50) comp -> EQUALS SEMI EQUALS .

    COMMA           reduce using rule 50 (comp -> EQUALS SEMI EQUALS .)


state 237

    (55) comp -> EQUALS SLASH EQUALS .

    COMMA           reduce using rule 55 (comp -> EQUALS SLASH EQUALS .)


state 238

    (64) aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR .

    RPAR            reduce using rule 64 (aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR .)
    COMMA           reduce using rule 64 (aggcmp -> AGGCMP LPAR LABEL COMMA term COMMA op COMMA comp COMMA INT RPAR .)

